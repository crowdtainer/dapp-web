/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export type CampaignDataStruct = {
  shippingAgent: PromiseOrValue<string>;
  signer: PromiseOrValue<string>;
  openingTime: PromiseOrValue<BigNumberish>;
  expireTime: PromiseOrValue<BigNumberish>;
  targetMinimum: PromiseOrValue<BigNumberish>;
  targetMaximum: PromiseOrValue<BigNumberish>;
  unitPricePerType: [
    PromiseOrValue<BigNumberish>,
    PromiseOrValue<BigNumberish>,
    PromiseOrValue<BigNumberish>,
    PromiseOrValue<BigNumberish>
  ];
  referralRate: PromiseOrValue<BigNumberish>;
  referralEligibilityValue: PromiseOrValue<BigNumberish>;
  token: PromiseOrValue<string>;
  legalContractURI: PromiseOrValue<string>;
};

export type CampaignDataStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  [BigNumber, BigNumber, BigNumber, BigNumber],
  BigNumber,
  BigNumber,
  string,
  string
] & {
  shippingAgent: string;
  signer: string;
  openingTime: BigNumber;
  expireTime: BigNumber;
  targetMinimum: BigNumber;
  targetMaximum: BigNumber;
  unitPricePerType: [BigNumber, BigNumber, BigNumber, BigNumber];
  referralRate: BigNumber;
  referralEligibilityValue: BigNumber;
  token: string;
  legalContractURI: string;
};

export interface CrowdtainerInterface extends utils.Interface {
  functions: {
    "abortProject()": FunctionFragment;
    "accumulatedRewards()": FunctionFragment;
    "accumulatedRewardsOf(address)": FunctionFragment;
    "claimFunds()": FunctionFragment;
    "claimRewards()": FunctionFragment;
    "costForWallet(address)": FunctionFragment;
    "crowdtainerState()": FunctionFragment;
    "discountForUser(address)": FunctionFragment;
    "expireTime()": FunctionFragment;
    "getPaidAndDeliver()": FunctionFragment;
    "getSigner()": FunctionFragment;
    "initialize(address,(address,address,uint256,uint256,uint256,uint256,uint256[4],uint256,uint256,address,string))": FunctionFragment;
    "invariant()": FunctionFragment;
    "join(address,uint256[4],bool,address)": FunctionFragment;
    "join(address,uint256[4])": FunctionFragment;
    "joinWithSignature(bytes,bytes)": FunctionFragment;
    "leave(address)": FunctionFragment;
    "legalContractURI()": FunctionFragment;
    "numberOfProducts()": FunctionFragment;
    "openingTime()": FunctionFragment;
    "owner()": FunctionFragment;
    "referralEligibilityValue()": FunctionFragment;
    "referralRate()": FunctionFragment;
    "referrerOfReferee(address)": FunctionFragment;
    "setSigner(address)": FunctionFragment;
    "setUrls(string[])": FunctionFragment;
    "shippingAgent()": FunctionFragment;
    "targetMaximum()": FunctionFragment;
    "targetMinimum()": FunctionFragment;
    "token()": FunctionFragment;
    "totalValueRaised()": FunctionFragment;
    "unitPricePerType(uint256)": FunctionFragment;
    "urls(uint256)": FunctionFragment;
    "usedNonces(address,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "abortProject"
      | "accumulatedRewards"
      | "accumulatedRewardsOf"
      | "claimFunds"
      | "claimRewards"
      | "costForWallet"
      | "crowdtainerState"
      | "discountForUser"
      | "expireTime"
      | "getPaidAndDeliver"
      | "getSigner"
      | "initialize"
      | "invariant"
      | "join(address,uint256[4],bool,address)"
      | "join(address,uint256[4])"
      | "joinWithSignature"
      | "leave"
      | "legalContractURI"
      | "numberOfProducts"
      | "openingTime"
      | "owner"
      | "referralEligibilityValue"
      | "referralRate"
      | "referrerOfReferee"
      | "setSigner"
      | "setUrls"
      | "shippingAgent"
      | "targetMaximum"
      | "targetMinimum"
      | "token"
      | "totalValueRaised"
      | "unitPricePerType"
      | "urls"
      | "usedNonces"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "abortProject",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accumulatedRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accumulatedRewardsOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "costForWallet",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "crowdtainerState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "discountForUser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "expireTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPaidAndDeliver",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getSigner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, CampaignDataStruct]
  ): string;
  encodeFunctionData(functionFragment: "invariant", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "join(address,uint256[4],bool,address)",
    values: [
      PromiseOrValue<string>,
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "join(address,uint256[4])",
    values: [
      PromiseOrValue<string>,
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "joinWithSignature",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "leave",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "legalContractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfProducts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openingTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "referralEligibilityValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referrerOfReferee",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSigner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUrls",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "shippingAgent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetMaximum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetMinimum",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalValueRaised",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unitPricePerType",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "urls",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "usedNonces",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "abortProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accumulatedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accumulatedRewardsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFunds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "costForWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crowdtainerState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "discountForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expireTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPaidAndDeliver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "invariant", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "join(address,uint256[4],bool,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "join(address,uint256[4])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "leave", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "legalContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referralEligibilityValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referrerOfReferee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUrls", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shippingAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetMaximum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetMinimum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalValueRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unitPricePerType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "urls", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usedNonces", data: BytesLike): Result;

  events: {
    "CCIPURLChanged(string[])": EventFragment;
    "CrowdtainerCreated(address,address)": EventFragment;
    "CrowdtainerInDeliveryStage(address,uint256)": EventFragment;
    "CrowdtainerInitialized(address,address,uint256,uint256,uint256,uint256,uint256[4],uint256,uint256,string,address)": EventFragment;
    "FundsClaimed(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Joined(address,uint256[4],address,uint256,uint256,bool)": EventFragment;
    "Left(address,uint256)": EventFragment;
    "RewardsClaimed(address,uint256)": EventFragment;
    "SignerChanged(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CCIPURLChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CrowdtainerCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CrowdtainerInDeliveryStage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CrowdtainerInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Joined"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Left"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignerChanged"): EventFragment;
}

export interface CCIPURLChangedEventObject {
  newUrls: string[];
}
export type CCIPURLChangedEvent = TypedEvent<
  [string[]],
  CCIPURLChangedEventObject
>;

export type CCIPURLChangedEventFilter = TypedEventFilter<CCIPURLChangedEvent>;

export interface CrowdtainerCreatedEventObject {
  owner: string;
  shippingAgent: string;
}
export type CrowdtainerCreatedEvent = TypedEvent<
  [string, string],
  CrowdtainerCreatedEventObject
>;

export type CrowdtainerCreatedEventFilter =
  TypedEventFilter<CrowdtainerCreatedEvent>;

export interface CrowdtainerInDeliveryStageEventObject {
  shippingAgent: string;
  totalValueRaised: BigNumber;
}
export type CrowdtainerInDeliveryStageEvent = TypedEvent<
  [string, BigNumber],
  CrowdtainerInDeliveryStageEventObject
>;

export type CrowdtainerInDeliveryStageEventFilter =
  TypedEventFilter<CrowdtainerInDeliveryStageEvent>;

export interface CrowdtainerInitializedEventObject {
  _owner: string;
  _token: string;
  _openingTime: BigNumber;
  _expireTime: BigNumber;
  _targetMinimum: BigNumber;
  _targetMaximum: BigNumber;
  _unitPricePerType: [BigNumber, BigNumber, BigNumber, BigNumber];
  _referralRate: BigNumber;
  _referralEligibilityValue: BigNumber;
  _legalContractURI: string;
  _signer: string;
}
export type CrowdtainerInitializedEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    [BigNumber, BigNumber, BigNumber, BigNumber],
    BigNumber,
    BigNumber,
    string,
    string
  ],
  CrowdtainerInitializedEventObject
>;

export type CrowdtainerInitializedEventFilter =
  TypedEventFilter<CrowdtainerInitializedEvent>;

export interface FundsClaimedEventObject {
  wallet: string;
  withdrawnAmount: BigNumber;
}
export type FundsClaimedEvent = TypedEvent<
  [string, BigNumber],
  FundsClaimedEventObject
>;

export type FundsClaimedEventFilter = TypedEventFilter<FundsClaimedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface JoinedEventObject {
  wallet: string;
  quantities: [BigNumber, BigNumber, BigNumber, BigNumber];
  referrer: string;
  finalCost: BigNumber;
  appliedDiscount: BigNumber;
  referralEnabled: boolean;
}
export type JoinedEvent = TypedEvent<
  [
    string,
    [BigNumber, BigNumber, BigNumber, BigNumber],
    string,
    BigNumber,
    BigNumber,
    boolean
  ],
  JoinedEventObject
>;

export type JoinedEventFilter = TypedEventFilter<JoinedEvent>;

export interface LeftEventObject {
  wallet: string;
  withdrawnAmount: BigNumber;
}
export type LeftEvent = TypedEvent<[string, BigNumber], LeftEventObject>;

export type LeftEventFilter = TypedEventFilter<LeftEvent>;

export interface RewardsClaimedEventObject {
  wallet: string;
  withdrawnAmount: BigNumber;
}
export type RewardsClaimedEvent = TypedEvent<
  [string, BigNumber],
  RewardsClaimedEventObject
>;

export type RewardsClaimedEventFilter = TypedEventFilter<RewardsClaimedEvent>;

export interface SignerChangedEventObject {
  newSigner: string;
}
export type SignerChangedEvent = TypedEvent<[string], SignerChangedEventObject>;

export type SignerChangedEventFilter = TypedEventFilter<SignerChangedEvent>;

export interface Crowdtainer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CrowdtainerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    abortProject(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    accumulatedRewards(overrides?: CallOverrides): Promise<[BigNumber]>;

    accumulatedRewardsOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    claimFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    costForWallet(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    crowdtainerState(overrides?: CallOverrides): Promise<[number]>;

    discountForUser(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    expireTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPaidAndDeliver(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getSigner(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _owner: PromiseOrValue<string>,
      _campaignData: CampaignDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    invariant(overrides?: CallOverrides): Promise<[void]>;

    "join(address,uint256[4],bool,address)"(
      _wallet: PromiseOrValue<string>,
      _quantities: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _enableReferral: PromiseOrValue<boolean>,
      _referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "join(address,uint256[4])"(
      _wallet: PromiseOrValue<string>,
      _quantities: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    joinWithSignature(
      result: PromiseOrValue<BytesLike>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    leave(
      _wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    legalContractURI(overrides?: CallOverrides): Promise<[string]>;

    numberOfProducts(overrides?: CallOverrides): Promise<[BigNumber]>;

    openingTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    referralEligibilityValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    referralRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    referrerOfReferee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setSigner(
      _signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUrls(
      _urls: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shippingAgent(overrides?: CallOverrides): Promise<[string]>;

    targetMaximum(overrides?: CallOverrides): Promise<[BigNumber]>;

    targetMinimum(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalValueRaised(overrides?: CallOverrides): Promise<[BigNumber]>;

    unitPricePerType(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    urls(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    usedNonces(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  abortProject(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  accumulatedRewards(overrides?: CallOverrides): Promise<BigNumber>;

  accumulatedRewardsOf(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  claimFunds(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimRewards(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  costForWallet(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  crowdtainerState(overrides?: CallOverrides): Promise<number>;

  discountForUser(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  expireTime(overrides?: CallOverrides): Promise<BigNumber>;

  getPaidAndDeliver(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getSigner(overrides?: CallOverrides): Promise<string>;

  initialize(
    _owner: PromiseOrValue<string>,
    _campaignData: CampaignDataStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  invariant(overrides?: CallOverrides): Promise<void>;

  "join(address,uint256[4],bool,address)"(
    _wallet: PromiseOrValue<string>,
    _quantities: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    _enableReferral: PromiseOrValue<boolean>,
    _referrer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "join(address,uint256[4])"(
    _wallet: PromiseOrValue<string>,
    _quantities: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  joinWithSignature(
    result: PromiseOrValue<BytesLike>,
    extraData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  leave(
    _wallet: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  legalContractURI(overrides?: CallOverrides): Promise<string>;

  numberOfProducts(overrides?: CallOverrides): Promise<BigNumber>;

  openingTime(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  referralEligibilityValue(overrides?: CallOverrides): Promise<BigNumber>;

  referralRate(overrides?: CallOverrides): Promise<BigNumber>;

  referrerOfReferee(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  setSigner(
    _signer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUrls(
    _urls: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shippingAgent(overrides?: CallOverrides): Promise<string>;

  targetMaximum(overrides?: CallOverrides): Promise<BigNumber>;

  targetMinimum(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  totalValueRaised(overrides?: CallOverrides): Promise<BigNumber>;

  unitPricePerType(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  urls(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  usedNonces(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    abortProject(overrides?: CallOverrides): Promise<void>;

    accumulatedRewards(overrides?: CallOverrides): Promise<BigNumber>;

    accumulatedRewardsOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimFunds(overrides?: CallOverrides): Promise<void>;

    claimRewards(overrides?: CallOverrides): Promise<void>;

    costForWallet(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    crowdtainerState(overrides?: CallOverrides): Promise<number>;

    discountForUser(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expireTime(overrides?: CallOverrides): Promise<BigNumber>;

    getPaidAndDeliver(overrides?: CallOverrides): Promise<void>;

    getSigner(overrides?: CallOverrides): Promise<string>;

    initialize(
      _owner: PromiseOrValue<string>,
      _campaignData: CampaignDataStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    invariant(overrides?: CallOverrides): Promise<void>;

    "join(address,uint256[4],bool,address)"(
      _wallet: PromiseOrValue<string>,
      _quantities: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _enableReferral: PromiseOrValue<boolean>,
      _referrer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "join(address,uint256[4])"(
      _wallet: PromiseOrValue<string>,
      _quantities: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<void>;

    joinWithSignature(
      result: PromiseOrValue<BytesLike>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    leave(
      _wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    legalContractURI(overrides?: CallOverrides): Promise<string>;

    numberOfProducts(overrides?: CallOverrides): Promise<BigNumber>;

    openingTime(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    referralEligibilityValue(overrides?: CallOverrides): Promise<BigNumber>;

    referralRate(overrides?: CallOverrides): Promise<BigNumber>;

    referrerOfReferee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    setSigner(
      _signer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUrls(
      _urls: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    shippingAgent(overrides?: CallOverrides): Promise<string>;

    targetMaximum(overrides?: CallOverrides): Promise<BigNumber>;

    targetMinimum(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    totalValueRaised(overrides?: CallOverrides): Promise<BigNumber>;

    unitPricePerType(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    urls(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    usedNonces(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "CCIPURLChanged(string[])"(
      newUrls?: PromiseOrValue<string>[] | null
    ): CCIPURLChangedEventFilter;
    CCIPURLChanged(
      newUrls?: PromiseOrValue<string>[] | null
    ): CCIPURLChangedEventFilter;

    "CrowdtainerCreated(address,address)"(
      owner?: PromiseOrValue<string> | null,
      shippingAgent?: PromiseOrValue<string> | null
    ): CrowdtainerCreatedEventFilter;
    CrowdtainerCreated(
      owner?: PromiseOrValue<string> | null,
      shippingAgent?: PromiseOrValue<string> | null
    ): CrowdtainerCreatedEventFilter;

    "CrowdtainerInDeliveryStage(address,uint256)"(
      shippingAgent?: PromiseOrValue<string> | null,
      totalValueRaised?: null
    ): CrowdtainerInDeliveryStageEventFilter;
    CrowdtainerInDeliveryStage(
      shippingAgent?: PromiseOrValue<string> | null,
      totalValueRaised?: null
    ): CrowdtainerInDeliveryStageEventFilter;

    "CrowdtainerInitialized(address,address,uint256,uint256,uint256,uint256,uint256[4],uint256,uint256,string,address)"(
      _owner?: PromiseOrValue<string> | null,
      _token?: null,
      _openingTime?: null,
      _expireTime?: null,
      _targetMinimum?: null,
      _targetMaximum?: null,
      _unitPricePerType?: null,
      _referralRate?: null,
      _referralEligibilityValue?: null,
      _legalContractURI?: null,
      _signer?: null
    ): CrowdtainerInitializedEventFilter;
    CrowdtainerInitialized(
      _owner?: PromiseOrValue<string> | null,
      _token?: null,
      _openingTime?: null,
      _expireTime?: null,
      _targetMinimum?: null,
      _targetMaximum?: null,
      _unitPricePerType?: null,
      _referralRate?: null,
      _referralEligibilityValue?: null,
      _legalContractURI?: null,
      _signer?: null
    ): CrowdtainerInitializedEventFilter;

    "FundsClaimed(address,uint256)"(
      wallet?: PromiseOrValue<string> | null,
      withdrawnAmount?: null
    ): FundsClaimedEventFilter;
    FundsClaimed(
      wallet?: PromiseOrValue<string> | null,
      withdrawnAmount?: null
    ): FundsClaimedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Joined(address,uint256[4],address,uint256,uint256,bool)"(
      wallet?: PromiseOrValue<string> | null,
      quantities?: null,
      referrer?: PromiseOrValue<string> | null,
      finalCost?: null,
      appliedDiscount?: null,
      referralEnabled?: null
    ): JoinedEventFilter;
    Joined(
      wallet?: PromiseOrValue<string> | null,
      quantities?: null,
      referrer?: PromiseOrValue<string> | null,
      finalCost?: null,
      appliedDiscount?: null,
      referralEnabled?: null
    ): JoinedEventFilter;

    "Left(address,uint256)"(
      wallet?: PromiseOrValue<string> | null,
      withdrawnAmount?: null
    ): LeftEventFilter;
    Left(
      wallet?: PromiseOrValue<string> | null,
      withdrawnAmount?: null
    ): LeftEventFilter;

    "RewardsClaimed(address,uint256)"(
      wallet?: PromiseOrValue<string> | null,
      withdrawnAmount?: null
    ): RewardsClaimedEventFilter;
    RewardsClaimed(
      wallet?: PromiseOrValue<string> | null,
      withdrawnAmount?: null
    ): RewardsClaimedEventFilter;

    "SignerChanged(address)"(
      newSigner?: PromiseOrValue<string> | null
    ): SignerChangedEventFilter;
    SignerChanged(
      newSigner?: PromiseOrValue<string> | null
    ): SignerChangedEventFilter;
  };

  estimateGas: {
    abortProject(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    accumulatedRewards(overrides?: CallOverrides): Promise<BigNumber>;

    accumulatedRewardsOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    claimFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    costForWallet(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    crowdtainerState(overrides?: CallOverrides): Promise<BigNumber>;

    discountForUser(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    expireTime(overrides?: CallOverrides): Promise<BigNumber>;

    getPaidAndDeliver(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getSigner(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _owner: PromiseOrValue<string>,
      _campaignData: CampaignDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    invariant(overrides?: CallOverrides): Promise<BigNumber>;

    "join(address,uint256[4],bool,address)"(
      _wallet: PromiseOrValue<string>,
      _quantities: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _enableReferral: PromiseOrValue<boolean>,
      _referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "join(address,uint256[4])"(
      _wallet: PromiseOrValue<string>,
      _quantities: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    joinWithSignature(
      result: PromiseOrValue<BytesLike>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    leave(
      _wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    legalContractURI(overrides?: CallOverrides): Promise<BigNumber>;

    numberOfProducts(overrides?: CallOverrides): Promise<BigNumber>;

    openingTime(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    referralEligibilityValue(overrides?: CallOverrides): Promise<BigNumber>;

    referralRate(overrides?: CallOverrides): Promise<BigNumber>;

    referrerOfReferee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setSigner(
      _signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUrls(
      _urls: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shippingAgent(overrides?: CallOverrides): Promise<BigNumber>;

    targetMaximum(overrides?: CallOverrides): Promise<BigNumber>;

    targetMinimum(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalValueRaised(overrides?: CallOverrides): Promise<BigNumber>;

    unitPricePerType(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    urls(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    usedNonces(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    abortProject(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    accumulatedRewards(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    accumulatedRewardsOf(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    claimFunds(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimRewards(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    costForWallet(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    crowdtainerState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    discountForUser(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expireTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPaidAndDeliver(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getSigner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _owner: PromiseOrValue<string>,
      _campaignData: CampaignDataStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    invariant(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "join(address,uint256[4],bool,address)"(
      _wallet: PromiseOrValue<string>,
      _quantities: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      _enableReferral: PromiseOrValue<boolean>,
      _referrer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "join(address,uint256[4])"(
      _wallet: PromiseOrValue<string>,
      _quantities: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    joinWithSignature(
      result: PromiseOrValue<BytesLike>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    leave(
      _wallet: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    legalContractURI(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numberOfProducts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    openingTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referralEligibilityValue(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    referralRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referrerOfReferee(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setSigner(
      _signer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUrls(
      _urls: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shippingAgent(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetMaximum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetMinimum(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalValueRaised(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unitPricePerType(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    urls(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    usedNonces(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
