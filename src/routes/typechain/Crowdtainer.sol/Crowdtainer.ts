/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type CampaignDataStruct = {
  shippingAgent: AddressLike;
  signer: AddressLike;
  openingTime: BigNumberish;
  expireTime: BigNumberish;
  targetMinimum: BigNumberish;
  targetMaximum: BigNumberish;
  unitPricePerType: BigNumberish[];
  referralRate: BigNumberish;
  referralEligibilityValue: BigNumberish;
  token: AddressLike;
  legalContractURI: string;
};

export type CampaignDataStructOutput = [
  shippingAgent: string,
  signer: string,
  openingTime: bigint,
  expireTime: bigint,
  targetMinimum: bigint,
  targetMaximum: bigint,
  unitPricePerType: bigint[],
  referralRate: bigint,
  referralEligibilityValue: bigint,
  token: string,
  legalContractURI: string
] & {
  shippingAgent: string;
  signer: string;
  openingTime: bigint;
  expireTime: bigint;
  targetMinimum: bigint;
  targetMaximum: bigint;
  unitPricePerType: bigint[];
  referralRate: bigint;
  referralEligibilityValue: bigint;
  token: string;
  legalContractURI: string;
};

export interface CrowdtainerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "abortProject"
      | "accumulatedRewards"
      | "accumulatedRewardsOf"
      | "claimFunds(address)"
      | "claimFunds()"
      | "claimRewards"
      | "costForWallet"
      | "crowdtainerState"
      | "discountForUser"
      | "enableReferral"
      | "expireTime"
      | "getPaidAndDeliver"
      | "getSigner"
      | "initialize"
      | "join(address,uint256[])"
      | "join(address,uint256[],bool,address)"
      | "joinWithSignature"
      | "leave"
      | "legalContractURI"
      | "numberOfProducts"
      | "openingTime"
      | "owner"
      | "referralEligibilityValue"
      | "referralRate"
      | "referrerOfReferee"
      | "setSigner"
      | "setUrls"
      | "shippingAgent"
      | "targetMaximum"
      | "targetMinimum"
      | "token"
      | "totalValueRaised"
      | "unitPricePerType"
      | "urls"
      | "usedNonces"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CCIPURLChanged"
      | "CrowdtainerCreated"
      | "CrowdtainerInDeliveryStage"
      | "CrowdtainerInitialized"
      | "FundsClaimed"
      | "Initialized"
      | "Joined"
      | "Left"
      | "RewardsClaimed"
      | "SignerChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "abortProject",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accumulatedRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accumulatedRewardsOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFunds(address)",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFunds()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "costForWallet",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "crowdtainerState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "discountForUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "enableReferral",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "expireTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPaidAndDeliver",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getSigner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, CampaignDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "join(address,uint256[])",
    values: [AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "join(address,uint256[],bool,address)",
    values: [AddressLike, BigNumberish[], boolean, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "joinWithSignature",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "leave", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "legalContractURI",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfProducts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "openingTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "referralEligibilityValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referralRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "referrerOfReferee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setSigner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "setUrls", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "shippingAgent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetMaximum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetMinimum",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalValueRaised",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unitPricePerType",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "urls", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "usedNonces",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "abortProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accumulatedRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accumulatedRewardsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFunds(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimFunds()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "costForWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "crowdtainerState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "discountForUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expireTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPaidAndDeliver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "join(address,uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "join(address,uint256[],bool,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinWithSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "leave", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "legalContractURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numberOfProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "openingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referralEligibilityValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referralRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "referrerOfReferee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setSigner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUrls", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shippingAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetMaximum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetMinimum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalValueRaised",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unitPricePerType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "urls", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "usedNonces", data: BytesLike): Result;
}

export namespace CCIPURLChangedEvent {
  export type InputTuple = [newUrls: string[]];
  export type OutputTuple = [newUrls: string[]];
  export interface OutputObject {
    newUrls: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CrowdtainerCreatedEvent {
  export type InputTuple = [owner: AddressLike, shippingAgent: AddressLike];
  export type OutputTuple = [owner: string, shippingAgent: string];
  export interface OutputObject {
    owner: string;
    shippingAgent: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CrowdtainerInDeliveryStageEvent {
  export type InputTuple = [
    shippingAgent: AddressLike,
    totalValueRaised: BigNumberish
  ];
  export type OutputTuple = [shippingAgent: string, totalValueRaised: bigint];
  export interface OutputObject {
    shippingAgent: string;
    totalValueRaised: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CrowdtainerInitializedEvent {
  export type InputTuple = [
    _owner: AddressLike,
    _token: AddressLike,
    _openingTime: BigNumberish,
    _expireTime: BigNumberish,
    _targetMinimum: BigNumberish,
    _targetMaximum: BigNumberish,
    _unitPricePerType: BigNumberish[],
    _referralRate: BigNumberish,
    _referralEligibilityValue: BigNumberish,
    _legalContractURI: string,
    _signer: AddressLike
  ];
  export type OutputTuple = [
    _owner: string,
    _token: string,
    _openingTime: bigint,
    _expireTime: bigint,
    _targetMinimum: bigint,
    _targetMaximum: bigint,
    _unitPricePerType: bigint[],
    _referralRate: bigint,
    _referralEligibilityValue: bigint,
    _legalContractURI: string,
    _signer: string
  ];
  export interface OutputObject {
    _owner: string;
    _token: string;
    _openingTime: bigint;
    _expireTime: bigint;
    _targetMinimum: bigint;
    _targetMaximum: bigint;
    _unitPricePerType: bigint[];
    _referralRate: bigint;
    _referralEligibilityValue: bigint;
    _legalContractURI: string;
    _signer: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundsClaimedEvent {
  export type InputTuple = [wallet: AddressLike, withdrawnAmount: BigNumberish];
  export type OutputTuple = [wallet: string, withdrawnAmount: bigint];
  export interface OutputObject {
    wallet: string;
    withdrawnAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JoinedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    quantities: BigNumberish[],
    referrer: AddressLike,
    finalCost: BigNumberish,
    appliedDiscount: BigNumberish,
    referralEnabled: boolean
  ];
  export type OutputTuple = [
    wallet: string,
    quantities: bigint[],
    referrer: string,
    finalCost: bigint,
    appliedDiscount: bigint,
    referralEnabled: boolean
  ];
  export interface OutputObject {
    wallet: string;
    quantities: bigint[];
    referrer: string;
    finalCost: bigint;
    appliedDiscount: bigint;
    referralEnabled: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LeftEvent {
  export type InputTuple = [wallet: AddressLike, withdrawnAmount: BigNumberish];
  export type OutputTuple = [wallet: string, withdrawnAmount: bigint];
  export interface OutputObject {
    wallet: string;
    withdrawnAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsClaimedEvent {
  export type InputTuple = [wallet: AddressLike, withdrawnAmount: BigNumberish];
  export type OutputTuple = [wallet: string, withdrawnAmount: bigint];
  export interface OutputObject {
    wallet: string;
    withdrawnAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SignerChangedEvent {
  export type InputTuple = [newSigner: AddressLike];
  export type OutputTuple = [newSigner: string];
  export interface OutputObject {
    newSigner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Crowdtainer extends BaseContract {
  connect(runner?: ContractRunner | null): Crowdtainer;
  waitForDeployment(): Promise<this>;

  interface: CrowdtainerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  abortProject: TypedContractMethod<[], [void], "nonpayable">;

  accumulatedRewards: TypedContractMethod<[], [bigint], "view">;

  accumulatedRewardsOf: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  "claimFunds(address)": TypedContractMethod<
    [wallet: AddressLike],
    [void],
    "nonpayable"
  >;

  "claimFunds()": TypedContractMethod<[], [void], "nonpayable">;

  claimRewards: TypedContractMethod<[], [void], "nonpayable">;

  costForWallet: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  crowdtainerState: TypedContractMethod<[], [bigint], "view">;

  discountForUser: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  enableReferral: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  expireTime: TypedContractMethod<[], [bigint], "view">;

  getPaidAndDeliver: TypedContractMethod<[], [void], "nonpayable">;

  getSigner: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [_owner: AddressLike, _campaignData: CampaignDataStruct],
    [void],
    "nonpayable"
  >;

  "join(address,uint256[])": TypedContractMethod<
    [_wallet: AddressLike, _quantities: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  "join(address,uint256[],bool,address)": TypedContractMethod<
    [
      _wallet: AddressLike,
      _quantities: BigNumberish[],
      _enableReferral: boolean,
      _referrer: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  joinWithSignature: TypedContractMethod<
    [result: BytesLike, extraData: BytesLike],
    [void],
    "nonpayable"
  >;

  leave: TypedContractMethod<[_wallet: AddressLike], [void], "nonpayable">;

  legalContractURI: TypedContractMethod<[], [string], "view">;

  numberOfProducts: TypedContractMethod<[], [bigint], "view">;

  openingTime: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  referralEligibilityValue: TypedContractMethod<[], [bigint], "view">;

  referralRate: TypedContractMethod<[], [bigint], "view">;

  referrerOfReferee: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  setSigner: TypedContractMethod<[_signer: AddressLike], [void], "nonpayable">;

  setUrls: TypedContractMethod<[_urls: string[]], [void], "nonpayable">;

  shippingAgent: TypedContractMethod<[], [string], "view">;

  targetMaximum: TypedContractMethod<[], [bigint], "view">;

  targetMinimum: TypedContractMethod<[], [bigint], "view">;

  token: TypedContractMethod<[], [string], "view">;

  totalValueRaised: TypedContractMethod<[], [bigint], "view">;

  unitPricePerType: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  urls: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  usedNonces: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "abortProject"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "accumulatedRewards"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "accumulatedRewardsOf"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "claimFunds(address)"
  ): TypedContractMethod<[wallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimFunds()"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "costForWallet"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "crowdtainerState"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "discountForUser"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "enableReferral"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "expireTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getPaidAndDeliver"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getSigner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_owner: AddressLike, _campaignData: CampaignDataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "join(address,uint256[])"
  ): TypedContractMethod<
    [_wallet: AddressLike, _quantities: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "join(address,uint256[],bool,address)"
  ): TypedContractMethod<
    [
      _wallet: AddressLike,
      _quantities: BigNumberish[],
      _enableReferral: boolean,
      _referrer: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "joinWithSignature"
  ): TypedContractMethod<
    [result: BytesLike, extraData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "leave"
  ): TypedContractMethod<[_wallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "legalContractURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "numberOfProducts"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "openingTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "referralEligibilityValue"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "referralRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "referrerOfReferee"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "setSigner"
  ): TypedContractMethod<[_signer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUrls"
  ): TypedContractMethod<[_urls: string[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "shippingAgent"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "targetMaximum"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "targetMinimum"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalValueRaised"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "unitPricePerType"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "urls"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "usedNonces"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [boolean],
    "view"
  >;

  getEvent(
    key: "CCIPURLChanged"
  ): TypedContractEvent<
    CCIPURLChangedEvent.InputTuple,
    CCIPURLChangedEvent.OutputTuple,
    CCIPURLChangedEvent.OutputObject
  >;
  getEvent(
    key: "CrowdtainerCreated"
  ): TypedContractEvent<
    CrowdtainerCreatedEvent.InputTuple,
    CrowdtainerCreatedEvent.OutputTuple,
    CrowdtainerCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CrowdtainerInDeliveryStage"
  ): TypedContractEvent<
    CrowdtainerInDeliveryStageEvent.InputTuple,
    CrowdtainerInDeliveryStageEvent.OutputTuple,
    CrowdtainerInDeliveryStageEvent.OutputObject
  >;
  getEvent(
    key: "CrowdtainerInitialized"
  ): TypedContractEvent<
    CrowdtainerInitializedEvent.InputTuple,
    CrowdtainerInitializedEvent.OutputTuple,
    CrowdtainerInitializedEvent.OutputObject
  >;
  getEvent(
    key: "FundsClaimed"
  ): TypedContractEvent<
    FundsClaimedEvent.InputTuple,
    FundsClaimedEvent.OutputTuple,
    FundsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "Joined"
  ): TypedContractEvent<
    JoinedEvent.InputTuple,
    JoinedEvent.OutputTuple,
    JoinedEvent.OutputObject
  >;
  getEvent(
    key: "Left"
  ): TypedContractEvent<
    LeftEvent.InputTuple,
    LeftEvent.OutputTuple,
    LeftEvent.OutputObject
  >;
  getEvent(
    key: "RewardsClaimed"
  ): TypedContractEvent<
    RewardsClaimedEvent.InputTuple,
    RewardsClaimedEvent.OutputTuple,
    RewardsClaimedEvent.OutputObject
  >;
  getEvent(
    key: "SignerChanged"
  ): TypedContractEvent<
    SignerChangedEvent.InputTuple,
    SignerChangedEvent.OutputTuple,
    SignerChangedEvent.OutputObject
  >;

  filters: {
    "CCIPURLChanged(string[])": TypedContractEvent<
      CCIPURLChangedEvent.InputTuple,
      CCIPURLChangedEvent.OutputTuple,
      CCIPURLChangedEvent.OutputObject
    >;
    CCIPURLChanged: TypedContractEvent<
      CCIPURLChangedEvent.InputTuple,
      CCIPURLChangedEvent.OutputTuple,
      CCIPURLChangedEvent.OutputObject
    >;

    "CrowdtainerCreated(address,address)": TypedContractEvent<
      CrowdtainerCreatedEvent.InputTuple,
      CrowdtainerCreatedEvent.OutputTuple,
      CrowdtainerCreatedEvent.OutputObject
    >;
    CrowdtainerCreated: TypedContractEvent<
      CrowdtainerCreatedEvent.InputTuple,
      CrowdtainerCreatedEvent.OutputTuple,
      CrowdtainerCreatedEvent.OutputObject
    >;

    "CrowdtainerInDeliveryStage(address,uint256)": TypedContractEvent<
      CrowdtainerInDeliveryStageEvent.InputTuple,
      CrowdtainerInDeliveryStageEvent.OutputTuple,
      CrowdtainerInDeliveryStageEvent.OutputObject
    >;
    CrowdtainerInDeliveryStage: TypedContractEvent<
      CrowdtainerInDeliveryStageEvent.InputTuple,
      CrowdtainerInDeliveryStageEvent.OutputTuple,
      CrowdtainerInDeliveryStageEvent.OutputObject
    >;

    "CrowdtainerInitialized(address,address,uint256,uint256,uint256,uint256,uint256[],uint256,uint256,string,address)": TypedContractEvent<
      CrowdtainerInitializedEvent.InputTuple,
      CrowdtainerInitializedEvent.OutputTuple,
      CrowdtainerInitializedEvent.OutputObject
    >;
    CrowdtainerInitialized: TypedContractEvent<
      CrowdtainerInitializedEvent.InputTuple,
      CrowdtainerInitializedEvent.OutputTuple,
      CrowdtainerInitializedEvent.OutputObject
    >;

    "FundsClaimed(address,uint256)": TypedContractEvent<
      FundsClaimedEvent.InputTuple,
      FundsClaimedEvent.OutputTuple,
      FundsClaimedEvent.OutputObject
    >;
    FundsClaimed: TypedContractEvent<
      FundsClaimedEvent.InputTuple,
      FundsClaimedEvent.OutputTuple,
      FundsClaimedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "Joined(address,uint256[],address,uint256,uint256,bool)": TypedContractEvent<
      JoinedEvent.InputTuple,
      JoinedEvent.OutputTuple,
      JoinedEvent.OutputObject
    >;
    Joined: TypedContractEvent<
      JoinedEvent.InputTuple,
      JoinedEvent.OutputTuple,
      JoinedEvent.OutputObject
    >;

    "Left(address,uint256)": TypedContractEvent<
      LeftEvent.InputTuple,
      LeftEvent.OutputTuple,
      LeftEvent.OutputObject
    >;
    Left: TypedContractEvent<
      LeftEvent.InputTuple,
      LeftEvent.OutputTuple,
      LeftEvent.OutputObject
    >;

    "RewardsClaimed(address,uint256)": TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;
    RewardsClaimed: TypedContractEvent<
      RewardsClaimedEvent.InputTuple,
      RewardsClaimedEvent.OutputTuple,
      RewardsClaimedEvent.OutputObject
    >;

    "SignerChanged(address)": TypedContractEvent<
      SignerChangedEvent.InputTuple,
      SignerChangedEvent.OutputTuple,
      SignerChangedEvent.OutputObject
    >;
    SignerChanged: TypedContractEvent<
      SignerChangedEvent.InputTuple,
      SignerChangedEvent.OutputTuple,
      SignerChangedEvent.OutputObject
    >;
  };
}
