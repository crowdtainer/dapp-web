/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type CampaignDataStruct = {
  shippingAgent: AddressLike;
  signer: AddressLike;
  openingTime: BigNumberish;
  expireTime: BigNumberish;
  targetMinimum: BigNumberish;
  targetMaximum: BigNumberish;
  unitPricePerType: BigNumberish[];
  referralRate: BigNumberish;
  referralEligibilityValue: BigNumberish;
  token: AddressLike;
  legalContractURI: string;
};

export type CampaignDataStructOutput = [
  shippingAgent: string,
  signer: string,
  openingTime: bigint,
  expireTime: bigint,
  targetMinimum: bigint,
  targetMaximum: bigint,
  unitPricePerType: bigint[],
  referralRate: bigint,
  referralEligibilityValue: bigint,
  token: string,
  legalContractURI: string
] & {
  shippingAgent: string;
  signer: string;
  openingTime: bigint;
  expireTime: bigint;
  targetMinimum: bigint;
  targetMaximum: bigint;
  unitPricePerType: bigint[];
  referralRate: bigint;
  referralEligibilityValue: bigint;
  token: string;
  legalContractURI: string;
};

export interface ICrowdtainerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "crowdtainerState"
      | "initialize"
      | "join(address,uint256[])"
      | "join(address,uint256[],bool,address)"
      | "leave"
      | "numberOfProducts"
      | "shippingAgent"
      | "unitPricePerType"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "crowdtainerState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, CampaignDataStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "join(address,uint256[])",
    values: [AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "join(address,uint256[],bool,address)",
    values: [AddressLike, BigNumberish[], boolean, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "leave", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "numberOfProducts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "shippingAgent",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unitPricePerType",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "crowdtainerState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "join(address,uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "join(address,uint256[],bool,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "leave", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfProducts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shippingAgent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unitPricePerType",
    data: BytesLike
  ): Result;
}

export interface ICrowdtainer extends BaseContract {
  connect(runner?: ContractRunner | null): ICrowdtainer;
  waitForDeployment(): Promise<this>;

  interface: ICrowdtainerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  crowdtainerState: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [owner: AddressLike, _campaignData: CampaignDataStruct],
    [void],
    "nonpayable"
  >;

  "join(address,uint256[])": TypedContractMethod<
    [_wallet: AddressLike, _quantities: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  "join(address,uint256[],bool,address)": TypedContractMethod<
    [
      _wallet: AddressLike,
      _quantities: BigNumberish[],
      _enableReferral: boolean,
      _referrer: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  leave: TypedContractMethod<[_wallet: AddressLike], [void], "nonpayable">;

  numberOfProducts: TypedContractMethod<[], [bigint], "view">;

  shippingAgent: TypedContractMethod<[], [string], "view">;

  unitPricePerType: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "crowdtainerState"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [owner: AddressLike, _campaignData: CampaignDataStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "join(address,uint256[])"
  ): TypedContractMethod<
    [_wallet: AddressLike, _quantities: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "join(address,uint256[],bool,address)"
  ): TypedContractMethod<
    [
      _wallet: AddressLike,
      _quantities: BigNumberish[],
      _enableReferral: boolean,
      _referrer: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "leave"
  ): TypedContractMethod<[_wallet: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "numberOfProducts"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "shippingAgent"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "unitPricePerType"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  filters: {};
}
