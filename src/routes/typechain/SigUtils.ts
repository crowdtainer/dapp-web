/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SigUtils {
  export type PermitStruct = {
    owner: AddressLike;
    spender: AddressLike;
    value: BigNumberish;
    nonce: BigNumberish;
    deadline: BigNumberish;
  };

  export type PermitStructOutput = [
    owner: string,
    spender: string,
    value: bigint,
    nonce: bigint,
    deadline: bigint
  ] & {
    owner: string;
    spender: string;
    value: bigint;
    nonce: bigint;
    deadline: bigint;
  };
}

export interface SigUtilsInterface extends Interface {
  getFunction(
    nameOrSignature: "PERMIT_TYPEHASH" | "getTypedDataHash"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTypedDataHash",
    values: [SigUtils.PermitStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTypedDataHash",
    data: BytesLike
  ): Result;
}

export interface SigUtils extends BaseContract {
  connect(runner?: ContractRunner | null): SigUtils;
  waitForDeployment(): Promise<this>;

  interface: SigUtilsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PERMIT_TYPEHASH: TypedContractMethod<[], [string], "view">;

  getTypedDataHash: TypedContractMethod<
    [_permit: SigUtils.PermitStruct],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PERMIT_TYPEHASH"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTypedDataHash"
  ): TypedContractMethod<[_permit: SigUtils.PermitStruct], [string], "view">;

  filters: {};
}
